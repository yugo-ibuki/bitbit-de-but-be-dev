// Code generated by tygo. DO NOT EDIT.
/**
 * Auto-generated TypeScript definitions for models
 * Generated by tygo - DO NOT EDIT
 */

//////////
// source: model.go

/**
 * NvdType :
 */
export const NvdType = "NVD";
/**
 * JvnType :
 */
export const JvnType = "JVN";
/**
 * FortinetType :
 */
export const FortinetType = "Fortinet";
/**
 * MitreType :
 */
export const MitreType = "Mitre";
/**
 * NvdExactVersionMatch :
 */
export const NvdExactVersionMatch = "NvdExactVersionMatch";
/**
 * NvdRoughVersionMatch :
 */
export const NvdRoughVersionMatch = "NvdRoughVersionMatch";
/**
 * NvdVendorProductMatch :
 */
export const NvdVendorProductMatch = "NvdVendorProductMatch";
/**
 * JvnVendorProductMatch :
 */
export const JvnVendorProductMatch = "JvnVendorProductMatch";
/**
 * FortinetExactVersionMatch :
 */
export const FortinetExactVersionMatch = "FortinetExactVersionMatch";
/**
 * FortinetRoughVersionMatch :
 */
export const FortinetRoughVersionMatch = "FortinetRoughVersionMatch";
/**
 * FortinetVendorProductMatch :
 */
export const FortinetVendorProductMatch = "FortinetVendorProductMatch";
/**
 * LatestSchemaVersion manages the Schema version used in the latest go-cve-dictionary.
 */
export const LatestSchemaVersion = 3;
/**
 * FetchMeta has meta information about fetched CVE data
 */
export interface FetchMeta {
  GoCVEDictRevision: string;
  SchemaVersion: number /* uint */;
  LastFetchedAt: string /* ISO8601 */;
}
/**
 * CveDetail :
 */
export interface CveDetail {
  CveID: string;
  Nvds: Nvd[];
  Jvns: Jvn[];
  Fortinets: Fortinet[];
  Mitres: Mitre[];
}
/**
 * CpeDetail :
 */
export interface CpeDetail {
  Nvds: NvdCpe[];
  Jvns: JvnCpe[];
  Fortinet: FortinetCpe[];
}
/**
 * Cvss2 has CVSS Version 2 info
 */
export interface Cvss2 {
  VectorString: string;
  AccessVector: string;
  AccessComplexity: string;
  Authentication: string;
  ConfidentialityImpact: string;
  IntegrityImpact: string;
  AvailabilityImpact: string;
  BaseScore: number /* float64 */;
  Severity: string;
}
/**
 * Cvss3 has CVSS Version 3 info
 */
export interface Cvss3 {
  VectorString: string;
  AttackVector: string;
  AttackComplexity: string;
  PrivilegesRequired: string;
  UserInteraction: string;
  Scope: string;
  ConfidentialityImpact: string;
  IntegrityImpact: string;
  AvailabilityImpact: string;
  BaseScore: number /* float64 */;
  BaseSeverity: string;
  ExploitabilityScore: number /* float64 */;
  ImpactScore: number /* float64 */;
}
/**
 * Cvss40 has CVSS Version 4.0 info
 */
export interface Cvss40 {
  VectorString: string;
  baseScore: number /* float64 */;
  BaseSeverity: string;
  ThreatScore?: number /* float64 */;
  ThreatSeverity?: string;
  EnvironmentalScore?: number /* float64 */;
  EnvironmentalSeverity?: string;
}
/**
 * CpeBase has common args of Cpe and EnvCpe
 */
export interface CpeBase {
  URI: string;
  FormattedString: string;
  WellFormedName: string;
  CpeWFN: CpeWFN;
  VersionStartExcluding: string;
  VersionStartIncluding: string;
  VersionEndExcluding: string;
  VersionEndIncluding: string;
}
/**
 * CpeWFN has CPE Well Formed name information
 */
export interface CpeWFN {
  Part: string;
  Vendor: string;
  Product: string;
  Version: string;
  Update: string;
  Edition: string;
  Language: string;
  SoftwareEdition: string;
  TargetSW: string;
  TargetHW: string;
  Other: string;
}
/**
 * Reference holds reference information about the CVE.
 */
export interface Reference {
  Link: string;
  Source: string;
  Tags: string;
  Name: string;
}
/**
 * Cert holds CERT alerts.
 */
export interface Cert {
  Title: string;
  Link: string;
}
/**
 * Nvd is a struct of NVD JSON
 * https://scap.nist.gov/schema/nvd/feed/0.1/nvd_cve_feed_json_0.1_beta.schema
 */
export interface Nvd {
  CveID: string;
  Descriptions: NvdDescription[];
  Cvss2: NvdCvss2Extra[];
  Cvss3: NvdCvss3[];
  Cvss40: NvdCvss40[];
  Cwes: NvdCwe[];
  Cpes: NvdCpe[];
  References: NvdReference[];
  Certs: NvdCert[];
  PublishedDate: string /* ISO8601 */;
  LastModifiedDate: string /* ISO8601 */;
  DetectionMethod: string;
}
/**
 * NvdDescription has description of the CVE
 */
export interface NvdDescription {
  Lang: string;
  Value: string;
}
/**
 * NvdCvss2Extra has Nvd extra CVSS V2 info
 */
export interface NvdCvss2Extra {
  Source: string;
  Type: string;
  Cvss2: Cvss2;
  ExploitabilityScore: number /* float64 */;
  ImpactScore: number /* float64 */;
  ObtainAllPrivilege: boolean;
  ObtainUserPrivilege: boolean;
  ObtainOtherPrivilege: boolean;
  UserInteractionRequired: boolean;
}
/**
 * NvdCvss3 has Nvd CVSS3 info
 */
export interface NvdCvss3 {
  Source: string;
  Type: string;
  Cvss3: Cvss3;
}
/**
 * NvdCvss40 has Nvd CVSS40 info
 */
export interface NvdCvss40 {
  Source: string;
  Type: string;
  Cvss40: Cvss40;
}
/**
 * NvdCwe has CweID
 */
export interface NvdCwe {
  Source: string;
  Type: string;
  CweID: string;
}
/**
 * NvdCpe is Child model of Nvd.
 * see https://www.ipa.go.jp/security/vuln/CPE.html
 * In NVD,
 * configurations>nodes>cpe>vulnerable: true
 */
export interface NvdCpe {
  CpeBase: CpeBase;
  EnvCpes: NvdEnvCpe[];
}
/**
 * NvdEnvCpe is a Environmental CPE
 * Only NVD has this information.
 * configurations>nodes>cpe>vulnerable: false
 */
export interface NvdEnvCpe {
  CpeBase: CpeBase;
}
/**
 * NvdReference holds reference information about the CVE.
 */
export interface NvdReference {
  Reference: Reference;
}
/**
 * NvdCert is Child model of Nvd.
 */
export interface NvdCert {
  Cert: Cert;
}
/**
 * Jvn is a model of JVN
 */
export interface Jvn {
  CveID: string;
  Title: string;
  Summary: string;
  JvnLink: string;
  JvnID: string;
  Cvss2: JvnCvss2;
  Cvss3: JvnCvss3;
  Cpes: JvnCpe[];
  References: JvnReference[];
  Certs: JvnCert[];
  PublishedDate: string /* ISO8601 */;
  LastModifiedDate: string /* ISO8601 */;
  DetectionMethod: string;
}
/**
 * JvnCvss2 has Jvn CVSS Version 2 info
 */
export interface JvnCvss2 {
  Cvss2: Cvss2;
}
/**
 * JvnCvss3 has JVN CVSS3 info
 */
export interface JvnCvss3 {
  Cvss3: Cvss3;
}
/**
 * JvnCpe is Child model of Jvn.
 * see https://www.ipa.go.jp/security/vuln/CPE.html
 */
export interface JvnCpe {
  CpeBase: CpeBase;
}
/**
 * JvnReference is Child model of Jvn.
 */
export interface JvnReference {
  Reference: Reference;
}
/**
 * JvnCert is Child model of Jvn.
 */
export interface JvnCert {
  Cert: Cert;
}
/**
 * Fortinet is a model of Fortinet
 */
export interface Fortinet {
  AdvisoryID: string;
  CveID: string;
  Title: string;
  Summary: string;
  Descriptions: string;
  Cvss3: FortinetCvss3;
  Cwes: FortinetCwe[];
  Cpes: FortinetCpe[];
  References: FortinetReference[];
  PublishedDate: string /* ISO8601 */;
  LastModifiedDate: string /* ISO8601 */;
  AdvisoryURL: string;
  DetectionMethod: string;
}
/**
 * FortinetCvss3 has Fortinet CVSS3 info
 */
export interface FortinetCvss3 {
  Cvss3: Cvss3;
}
/**
 * FortinetCwe has CweID
 */
export interface FortinetCwe {
  CweID: string;
}
/**
 * FortinetCpe is Child model of Fortinet.
 */
export interface FortinetCpe {
  CpeBase: CpeBase;
}
/**
 * FortinetReference holds reference information about the CVE.
 */
export interface FortinetReference {
  Reference: Reference;
}
/**
 * Mitre : https://cveproject.github.io/cve-schema/schema/CVE_Record_Format.json
 */
export interface Mitre {
  DataType: string;
  DataVersion: string;
  CVEMetadata: MitreCVEMetadata;
  Containers: MitreContainer[];
}
/**
 * MitreCVEMetadata : #/definitions/cveMetadataPublished
 */
export interface MitreCVEMetadata {
  CVEID: string;
  AssignerOrgID: string;
  AssignerShortName?: string;
  RequesterUserID?: string;
  Serial?: number /* int */;
  State: string;
  DatePublished?: string /* ISO8601 */;
  DateUpdated?: string /* ISO8601 */;
  DateReserved?: string /* ISO8601 */;
  DateRejected?: string /* ISO8601 */;
}
/**
 * MitreContainer : #/definitions/cnaPublishedContainer, #/definitions/adpContainer
 */
export interface MitreContainer {
  ContainerType: string;
  ProviderMetadata: MitreProviderMetadata;
  Title?: string;
  Descriptions: MitreDescription[];
  Affected: MitreProduct[];
  ProblemTypes: MitreProblemType[];
  Impacts: MitreImpact[];
  Metrics: MitreMetric[];
  Workarounds: MitreWorkaround[];
  Solutions: MitreSolution[];
  Exploits: MitreExploit[];
  Configurations: MitreConfiguration[];
  References: MitreReference[];
  Timeline: MitreTimeline[];
  Credits: MitreCredit[];
  Source: string;
  Tags: MitreTag[];
  TaxonomyMappings: MitreTaxonomyMapping[];
  DateAssigned?: string /* ISO8601 */;
  DatePublic?: string /* ISO8601 */;
}
/**
 * MitreProviderMetadata : #/definitions/providerMetadata
 */
export interface MitreProviderMetadata {
  OrgID: string;
  ShortName?: string;
  DateUpdated?: string /* ISO8601 */;
}
/**
 * MitreDescription : #/definitions/description
 */
export interface MitreDescription {
  Lang: string;
  Value: string;
  SupportingMedia: MitreDescriptionSupportingMedia[];
}
/**
 * MitreDescriptionSupportingMedia : #/definitions/description
 */
export interface MitreDescriptionSupportingMedia {
  Type: string;
  Base64?: boolean;
  Value: string;
}
/**
 * MitreProduct : #/definitions/product
 */
export interface MitreProduct {
  Vendor?: string;
  Product?: string;
  CollectionURL?: string;
  PackageName?: string;
  Cpes: MitreProductCPE[];
  Modules: MitreProductModule[];
  ProgramFiles: MitreProductProgramFile[];
  ProgramRoutines: MitreProductProgramRoutine[];
  Platforms: MitreProductPlatform[];
  Repo?: string;
  DefaultStatus?: string;
  Versions: MitreProductVersion[];
}
/**
 * MitreProductCPE : #/definitions/product
 */
export interface MitreProductCPE {
  CPE: string;
}
/**
 * MitreProductModule : #/definitions/product
 */
export interface MitreProductModule {
  Module: string;
}
/**
 * MitreProductProgramFile : #/definitions/product
 */
export interface MitreProductProgramFile {
  ProgramFile: string;
}
/**
 * MitreProductProgramRoutine : #/definitions/product
 */
export interface MitreProductProgramRoutine {
  Name: string;
}
/**
 * MitreProductPlatform : #/definitions/product
 */
export interface MitreProductPlatform {
  Platform: string;
}
/**
 * MitreProductVersion : #/definitions/product
 */
export interface MitreProductVersion {
  Status: string;
  VersionType?: string;
  Version: string;
  LessThan?: string;
  LessThanOrEqual?: string;
  Changes: MitreProductVersionChange[];
}
/**
 * MitreProductVersionChange : #/definitions/product
 */
export interface MitreProductVersionChange {
  At: string;
  Status: string;
}
/**
 * MitreProblemType : #/definitions/problemTypes
 */
export interface MitreProblemType {
  Descriptions: MitreProblemTypeDescription[];
}
/**
 * MitreProblemTypeDescription : #/definitions/problemTypes
 */
export interface MitreProblemTypeDescription {
  Type?: string;
  Lang: string;
  Description: string;
  CweID?: string;
  References: MitreProblemTypeDescriptionReference[];
}
/**
 * MitreProblemTypeDescriptionReference : #/definitions/references
 */
export interface MitreProblemTypeDescriptionReference {
  Reference: Reference;
}
/**
 * MitreImpact : #/definitions/impacts
 */
export interface MitreImpact {
  Descriptions: MitreImpactDescription[];
  CapecID?: string;
}
/**
 * MitreImpactDescription : #/definitions/description
 */
export interface MitreImpactDescription {
  Lang: string;
  Value: string;
  SupportingMedia: MitreImpactDescriptionSupportingMedia[];
}
/**
 * MitreImpactDescriptionSupportingMedia : #/definitions/description
 */
export interface MitreImpactDescriptionSupportingMedia {
  Type: string;
  Base64?: boolean;
  Value: string;
}
/**
 * MitreMetric : #/definitions/metrics
 */
export interface MitreMetric {
  Format: string;
  Scenarios: MitreMetricScenario[];
  CVSSv2?: MitreMetricCVSS2;
  CVSSv30?: MitreMetricCVSS30;
  CVSSv31?: MitreMetricCVSS31;
  CVSSv40?: MitreMetricCVSS40;
  SSVC?: MitreMetricSSVC;
  KEV?: MitreMetricKEV;
  Other?: MitreMetricOther;
}
/**
 * MitreMetricScenario : #/definitions/metrics
 */
export interface MitreMetricScenario {
  Lang: string;
  Value: string;
}
/**
 * MitreMetricCVSS2 : https://www.first.org/cvss/cvss-v2.0.json?20170531
 */
export interface MitreMetricCVSS2 {
  Cvss2: Cvss2;
}
/**
 * MitreMetricCVSS30 : https://www.first.org/cvss/cvss-v3.0.json?20170531
 */
export interface MitreMetricCVSS30 {
  Cvss3: Cvss3;
}
/**
 * MitreMetricCVSS31 : https://www.first.org/cvss/cvss-v3.1.json?20210501
 */
export interface MitreMetricCVSS31 {
  Cvss3: Cvss3;
}
/**
 * MitreMetricCVSS40 : https://www.first.org/cvss/cvss-v4.0.json?20231011
 */
export interface MitreMetricCVSS40 {
  Cvss40: Cvss40;
}
/**
 * MitreMetricSSVC :
 */
export interface MitreMetricSSVC {
  Role: string;
  Version: string;
  Timestamp: string /* ISO8601 */;
  Exploitation?: string;
  Automatable?: string;
  TechnicalImpact?: string;
}
/**
 * MitreMetricKEV : https://github.com/cisagov/vulnrichment/blob/3f9d69632037fae3b7abdf47fc848c287702ffaa/assets/kev_metrics_schema-1.0.json
 */
export interface MitreMetricKEV {
  DateAdded: string /* ISO8601 */;
  Reference: string;
}
/**
 * MitreMetricOther : https://github.com/CVEProject/cve-schema/blob/30f59c7de92fbc77bddade302601cb500c66f718/schema/CVE_Record_Format.json#L901-L923
 */
export interface MitreMetricOther {
  Type: string;
  Content: string;
}
/**
 * MitreWorkaround : #/definitions/workarounds
 */
export interface MitreWorkaround {
  Lang: string;
  Value: string;
  SupportingMedia: MitreWorkaroundSupportingMedia[];
}
/**
 * MitreWorkaroundSupportingMedia : #/definitions/description
 */
export interface MitreWorkaroundSupportingMedia {
  Type: string;
  Base64?: boolean;
  Value: string;
}
/**
 * MitreSolution : #/definitions/solutions
 */
export interface MitreSolution {
  Lang: string;
  Value: string;
  SupportingMedia: MitreSolutionSupportingMedia[];
}
/**
 * MitreSolutionSupportingMedia : #/definitions/description
 */
export interface MitreSolutionSupportingMedia {
  Type: string;
  Base64?: boolean;
  Value: string;
}
/**
 * MitreExploit : #/definitions/exploits
 */
export interface MitreExploit {
  Lang: string;
  Value: string;
  SupportingMedia: MitreExploitSupportingMedia[];
}
/**
 * MitreExploitSupportingMedia : #/definitions/description
 */
export interface MitreExploitSupportingMedia {
  Type: string;
  Base64?: boolean;
  Value: string;
}
/**
 * MitreConfiguration : #/definitions/configurations
 */
export interface MitreConfiguration {
  Lang: string;
  Value: string;
  SupportingMedia: MitreConfigurationSupportingMedia[];
}
/**
 * MitreConfigurationSupportingMedia : #/definitions/description
 */
export interface MitreConfigurationSupportingMedia {
  Type: string;
  Base64?: boolean;
  Value: string;
}
/**
 * MitreReference : #/definitions/references
 */
export interface MitreReference {
  Reference: Reference;
}
/**
 * MitreTimeline : #/definitions/timeline
 */
export interface MitreTimeline {
  Time: string /* ISO8601 */;
  Lang: string;
  Value: string;
}
/**
 * MitreCredit : #/definitions/credits
 */
export interface MitreCredit {
  Type?: string;
  Lang: string;
  User?: string;
  Value: string;
}
/**
 * MitreTag : #/definitions/cnaTags, #/definitions/adpTags
 */
export interface MitreTag {
  Tag: string;
}
/**
 * MitreTaxonomyMapping : #/definitions/taxonomyMappings
 */
export interface MitreTaxonomyMapping {
  TaxonomyVersion?: string;
  TaxonomyName: string;
  TaxonomyRelations: MitreTaxonomyRelation[];
}
/**
 * MitreTaxonomyRelation : #/definitions/taxonomyMappings
 */
export interface MitreTaxonomyRelation {
  TaxonomyID: string;
  RelationshipName: string;
  RelationshipValue: string;
}
