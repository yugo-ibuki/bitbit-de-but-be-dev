// Generated by ts-to-zod
import { z } from "zod";

export const fetchMetaSchema = z.object({
  GoCVEDictRevision: z.string(),
  SchemaVersion: z.number(),
  LastFetchedAt: z.string(),
});

export const cvss2Schema = z.object({
  VectorString: z.string(),
  AccessVector: z.string(),
  AccessComplexity: z.string(),
  Authentication: z.string(),
  ConfidentialityImpact: z.string(),
  IntegrityImpact: z.string(),
  AvailabilityImpact: z.string(),
  BaseScore: z.number(),
  Severity: z.string(),
});

export const cvss3Schema = z.object({
  VectorString: z.string(),
  AttackVector: z.string(),
  AttackComplexity: z.string(),
  PrivilegesRequired: z.string(),
  UserInteraction: z.string(),
  Scope: z.string(),
  ConfidentialityImpact: z.string(),
  IntegrityImpact: z.string(),
  AvailabilityImpact: z.string(),
  BaseScore: z.number(),
  BaseSeverity: z.string(),
  ExploitabilityScore: z.number(),
  ImpactScore: z.number(),
});

export const cvss40Schema = z.object({
  VectorString: z.string(),
  baseScore: z.number(),
  BaseSeverity: z.string(),
  ThreatScore: z.number().optional(),
  ThreatSeverity: z.string().optional(),
  EnvironmentalScore: z.number().optional(),
  EnvironmentalSeverity: z.string().optional(),
});

export const cpeWFNSchema = z.object({
  Part: z.string(),
  Vendor: z.string(),
  Product: z.string(),
  Version: z.string(),
  Update: z.string(),
  Edition: z.string(),
  Language: z.string(),
  SoftwareEdition: z.string(),
  TargetSW: z.string(),
  TargetHW: z.string(),
  Other: z.string(),
});

export const referenceSchema = z.object({
  Link: z.string(),
  Source: z.string(),
  Tags: z.string(),
  Name: z.string(),
});

export const certSchema = z.object({
  Title: z.string(),
  Link: z.string(),
});

export const nvdDescriptionSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
});

export const nvdCvss2ExtraSchema = z.object({
  Source: z.string(),
  Type: z.string(),
  Cvss2: cvss2Schema,
  ExploitabilityScore: z.number(),
  ImpactScore: z.number(),
  ObtainAllPrivilege: z.boolean(),
  ObtainUserPrivilege: z.boolean(),
  ObtainOtherPrivilege: z.boolean(),
  UserInteractionRequired: z.boolean(),
});

export const nvdCvss3Schema = z.object({
  Source: z.string(),
  Type: z.string(),
  Cvss3: cvss3Schema,
});

export const nvdCvss40Schema = z.object({
  Source: z.string(),
  Type: z.string(),
  Cvss40: cvss40Schema,
});

export const nvdCweSchema = z.object({
  Source: z.string(),
  Type: z.string(),
  CweID: z.string(),
});

export const nvdReferenceSchema = z.object({
  Reference: referenceSchema,
});

export const nvdCertSchema = z.object({
  Cert: certSchema,
});

export const cpeBaseSchema = z.object({
  URI: z.string(),
  FormattedString: z.string(),
  WellFormedName: z.string(),
  CpeWFN: cpeWFNSchema,
  VersionStartExcluding: z.string(),
  VersionStartIncluding: z.string(),
  VersionEndExcluding: z.string(),
  VersionEndIncluding: z.string(),
});

export const nvdEnvCpeSchema = z.object({
  CpeBase: cpeBaseSchema,
});

export const jvnCvss2Schema = z.object({
  Cvss2: cvss2Schema,
});

export const jvnCvss3Schema = z.object({
  Cvss3: cvss3Schema,
});

export const jvnCpeSchema = z.object({
  CpeBase: cpeBaseSchema,
});

export const jvnReferenceSchema = z.object({
  Reference: referenceSchema,
});

export const jvnCertSchema = z.object({
  Cert: certSchema,
});

export const fortinetCvss3Schema = z.object({
  Cvss3: cvss3Schema,
});

export const fortinetCweSchema = z.object({
  CweID: z.string(),
});

export const fortinetCpeSchema = z.object({
  CpeBase: cpeBaseSchema,
});

export const fortinetReferenceSchema = z.object({
  Reference: referenceSchema,
});

export const mitreCVEMetadataSchema = z.object({
  CVEID: z.string(),
  AssignerOrgID: z.string(),
  AssignerShortName: z.string().optional(),
  RequesterUserID: z.string().optional(),
  Serial: z.number().optional(),
  State: z.string(),
  DatePublished: z.string().optional(),
  DateUpdated: z.string().optional(),
  DateReserved: z.string().optional(),
  DateRejected: z.string().optional(),
});

export const mitreProviderMetadataSchema = z.object({
  OrgID: z.string(),
  ShortName: z.string().optional(),
  DateUpdated: z.string().optional(),
});

export const mitreReferenceSchema = z.object({
  Reference: referenceSchema,
});

export const mitreTimelineSchema = z.object({
  Time: z.string(),
  Lang: z.string(),
  Value: z.string(),
});

export const mitreCreditSchema = z.object({
  Type: z.string().optional(),
  Lang: z.string(),
  User: z.string().optional(),
  Value: z.string(),
});

export const mitreTagSchema = z.object({
  Tag: z.string(),
});

export const mitreDescriptionSupportingMediaSchema = z.object({
  Type: z.string(),
  Base64: z.boolean().optional(),
  Value: z.string(),
});

export const mitreProductCPESchema = z.object({
  CPE: z.string(),
});

export const mitreProductModuleSchema = z.object({
  Module: z.string(),
});

export const mitreProductProgramFileSchema = z.object({
  ProgramFile: z.string(),
});

export const mitreProductProgramRoutineSchema = z.object({
  Name: z.string(),
});

export const mitreProductPlatformSchema = z.object({
  Platform: z.string(),
});

export const mitreProductVersionChangeSchema = z.object({
  At: z.string(),
  Status: z.string(),
});

export const mitreProblemTypeDescriptionReferenceSchema = z.object({
  Reference: referenceSchema,
});

export const mitreImpactDescriptionSupportingMediaSchema = z.object({
  Type: z.string(),
  Base64: z.boolean().optional(),
  Value: z.string(),
});

export const mitreMetricScenarioSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
});

export const mitreMetricCVSS2Schema = z.object({
  Cvss2: cvss2Schema,
});

export const mitreMetricCVSS30Schema = z.object({
  Cvss3: cvss3Schema,
});

export const mitreMetricCVSS31Schema = z.object({
  Cvss3: cvss3Schema,
});

export const mitreMetricCVSS40Schema = z.object({
  Cvss40: cvss40Schema,
});

export const mitreMetricSSVCSchema = z.object({
  Role: z.string(),
  Version: z.string(),
  Timestamp: z.string(),
  Exploitation: z.string().optional(),
  Automatable: z.string().optional(),
  TechnicalImpact: z.string().optional(),
});

export const mitreMetricKEVSchema = z.object({
  DateAdded: z.string(),
  Reference: z.string(),
});

export const mitreMetricOtherSchema = z.object({
  Type: z.string(),
  Content: z.string(),
});

export const mitreWorkaroundSupportingMediaSchema = z.object({
  Type: z.string(),
  Base64: z.boolean().optional(),
  Value: z.string(),
});

export const mitreSolutionSupportingMediaSchema = z.object({
  Type: z.string(),
  Base64: z.boolean().optional(),
  Value: z.string(),
});

export const mitreExploitSupportingMediaSchema = z.object({
  Type: z.string(),
  Base64: z.boolean().optional(),
  Value: z.string(),
});

export const mitreConfigurationSupportingMediaSchema = z.object({
  Type: z.string(),
  Base64: z.boolean().optional(),
  Value: z.string(),
});

export const mitreTaxonomyRelationSchema = z.object({
  TaxonomyID: z.string(),
  RelationshipName: z.string(),
  RelationshipValue: z.string(),
});

export const jvnSchema = z.object({
  CveID: z.string(),
  Title: z.string(),
  Summary: z.string(),
  JvnLink: z.string(),
  JvnID: z.string(),
  Cvss2: jvnCvss2Schema,
  Cvss3: jvnCvss3Schema,
  Cpes: z.array(jvnCpeSchema),
  References: z.array(jvnReferenceSchema),
  Certs: z.array(jvnCertSchema),
  PublishedDate: z.string(),
  LastModifiedDate: z.string(),
  DetectionMethod: z.string(),
});

export const fortinetSchema = z.object({
  AdvisoryID: z.string(),
  CveID: z.string(),
  Title: z.string(),
  Summary: z.string(),
  Descriptions: z.string(),
  Cvss3: fortinetCvss3Schema,
  Cwes: z.array(fortinetCweSchema),
  Cpes: z.array(fortinetCpeSchema),
  References: z.array(fortinetReferenceSchema),
  PublishedDate: z.string(),
  LastModifiedDate: z.string(),
  AdvisoryURL: z.string(),
  DetectionMethod: z.string(),
});

export const nvdCpeSchema = z.object({
  CpeBase: cpeBaseSchema,
  EnvCpes: z.array(nvdEnvCpeSchema),
});

export const nvdSchema = z.object({
  CveID: z.string(),
  Descriptions: z.array(nvdDescriptionSchema),
  Cvss2: z.array(nvdCvss2ExtraSchema),
  Cvss3: z.array(nvdCvss3Schema),
  Cvss40: z.array(nvdCvss40Schema),
  Cwes: z.array(nvdCweSchema),
  Cpes: z.array(nvdCpeSchema),
  References: z.array(nvdReferenceSchema),
  Certs: z.array(nvdCertSchema),
  PublishedDate: z.string(),
  LastModifiedDate: z.string(),
  DetectionMethod: z.string(),
});

export const mitreDescriptionSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
  SupportingMedia: z.array(mitreDescriptionSupportingMediaSchema),
});

export const mitreMetricSchema = z.object({
  Format: z.string(),
  Scenarios: z.array(mitreMetricScenarioSchema),
  CVSSv2: mitreMetricCVSS2Schema.optional(),
  CVSSv30: mitreMetricCVSS30Schema.optional(),
  CVSSv31: mitreMetricCVSS31Schema.optional(),
  CVSSv40: mitreMetricCVSS40Schema.optional(),
  SSVC: mitreMetricSSVCSchema.optional(),
  KEV: mitreMetricKEVSchema.optional(),
  Other: mitreMetricOtherSchema.optional(),
});

export const mitreWorkaroundSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
  SupportingMedia: z.array(mitreWorkaroundSupportingMediaSchema),
});

export const mitreSolutionSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
  SupportingMedia: z.array(mitreSolutionSupportingMediaSchema),
});

export const mitreExploitSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
  SupportingMedia: z.array(mitreExploitSupportingMediaSchema),
});

export const mitreConfigurationSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
  SupportingMedia: z.array(mitreConfigurationSupportingMediaSchema),
});

export const mitreTaxonomyMappingSchema = z.object({
  TaxonomyVersion: z.string().optional(),
  TaxonomyName: z.string(),
  TaxonomyRelations: z.array(mitreTaxonomyRelationSchema),
});

export const mitreProductVersionSchema = z.object({
  Status: z.string(),
  VersionType: z.string().optional(),
  Version: z.string(),
  LessThan: z.string().optional(),
  LessThanOrEqual: z.string().optional(),
  Changes: z.array(mitreProductVersionChangeSchema),
});

export const mitreProblemTypeDescriptionSchema = z.object({
  Type: z.string().optional(),
  Lang: z.string(),
  Description: z.string(),
  CweID: z.string().optional(),
  References: z.array(mitreProblemTypeDescriptionReferenceSchema),
});

export const mitreImpactDescriptionSchema = z.object({
  Lang: z.string(),
  Value: z.string(),
  SupportingMedia: z.array(mitreImpactDescriptionSupportingMediaSchema),
});

export const cpeDetailSchema = z.object({
  Nvds: z.array(nvdCpeSchema),
  Jvns: z.array(jvnCpeSchema),
  Fortinet: z.array(fortinetCpeSchema),
});

export const mitreProductSchema = z.object({
  Vendor: z.string().optional(),
  Product: z.string().optional(),
  CollectionURL: z.string().optional(),
  PackageName: z.string().optional(),
  Cpes: z.array(mitreProductCPESchema),
  Modules: z.array(mitreProductModuleSchema),
  ProgramFiles: z.array(mitreProductProgramFileSchema),
  ProgramRoutines: z.array(mitreProductProgramRoutineSchema),
  Platforms: z.array(mitreProductPlatformSchema),
  Repo: z.string().optional(),
  DefaultStatus: z.string().optional(),
  Versions: z.array(mitreProductVersionSchema),
});

export const mitreProblemTypeSchema = z.object({
  Descriptions: z.array(mitreProblemTypeDescriptionSchema),
});

export const mitreImpactSchema = z.object({
  Descriptions: z.array(mitreImpactDescriptionSchema),
  CapecID: z.string().optional(),
});

export const mitreContainerSchema = z.object({
  ContainerType: z.string(),
  ProviderMetadata: mitreProviderMetadataSchema,
  Title: z.string().optional(),
  Descriptions: z.array(mitreDescriptionSchema),
  Affected: z.array(mitreProductSchema),
  ProblemTypes: z.array(mitreProblemTypeSchema),
  Impacts: z.array(mitreImpactSchema),
  Metrics: z.array(mitreMetricSchema),
  Workarounds: z.array(mitreWorkaroundSchema),
  Solutions: z.array(mitreSolutionSchema),
  Exploits: z.array(mitreExploitSchema),
  Configurations: z.array(mitreConfigurationSchema),
  References: z.array(mitreReferenceSchema),
  Timeline: z.array(mitreTimelineSchema),
  Credits: z.array(mitreCreditSchema),
  Source: z.string(),
  Tags: z.array(mitreTagSchema),
  TaxonomyMappings: z.array(mitreTaxonomyMappingSchema),
  DateAssigned: z.string().optional(),
  DatePublic: z.string().optional(),
});

export const mitreSchema = z.object({
  DataType: z.string(),
  DataVersion: z.string(),
  CVEMetadata: mitreCVEMetadataSchema,
  Containers: z.array(mitreContainerSchema),
});

export const cveDetailSchema = z.object({
  CveID: z.string(),
  Nvds: z.array(nvdSchema),
  Jvns: z.array(jvnSchema),
  Fortinets: z.array(fortinetSchema),
  Mitres: z.array(mitreSchema),
});
