#include <iostream>  // 入出力のためのヘッダーファイル
#include <string>    // 文字列操作のためのヘッダーファイル
using namespace std;

/**
 * たこ焼き価格計算プログラム
 * 
 * パターン1
 * 入力
 * 1
 * price
 * N
 * 1行目で、パターンを表す整数1が入力されます。
 * 2行目で、たこ焼き1個あたりの値段
 * priceが入力されます。
 * 3行目で、たこ焼き1セットあたりの個数
 * Nが入力されます。
 *
 * 出力
 * たこ焼き1セットあたりの値段(
 * =N×price)を出力します。
 *
 * パターン2
 * 入力
 * 2
 * text
 * price
 * N
 * 1行目で、パターンを表す整数2が入力されます。
 * 2行目で、たこ焼きセットの説明文
 * textが入力されます。
 * 3行目で、たこ焼き1個あたりの値段
 * priceが入力されます。
 * 4行目で、たこ焼き1セットあたりの個数
 * Nが入力されます。
 *
 * 出力
 * 1行目で、たこ焼きセットの説明文
 * textの末尾に!をつけて出力します。
 * 2行目で、たこ焼き1セット辺りの値段(
 * =N×price)を出力します。
 */
int main() {
  // パターン番号の入力（1または2）
  int pattern;
  cin >> pattern;
  
  // 必要な変数の宣言
  string text = "";  // 説明文（パターン2で使用）- 空文字列で初期化
  int price;         // たこ焼き1個あたりの値段
  int N;             // たこ焼き1セットあたりの個数
  
  // パターンに応じた入力処理
  if (pattern == 1) {
    // パターン1: 価格と個数を入力（それぞれ別の行）
    cin >> price;  // 2行目: たこ焼き1個あたりの値段
    cin >> N;      // 3行目: たこ焼き1セットあたりの個数
  } else if (pattern == 2) {
    // パターン2: 説明文、価格、個数を入力（それぞれ別の行）
    cin.ignore();  // 前の入力（パターン番号）の改行を無視するために必要
    getline(cin, text);  // 2行目: 説明文（スペースを含む文章も読み込める）
    cin >> price;  // 3行目: たこ焼き1個あたりの値段
    cin >> N;      // 4行目: たこ焼き1セットあたりの個数
  }
  
  // パターンに応じた出力処理
  if (pattern == 2) {
    // パターン2の場合のみ: 説明文に!をつけて出力
    cout << text << "!" << endl;
  }
  
  // 両パターン共通: セット価格の計算と出力
  cout << price * N << endl;
  
  return 0;  // プログラムの正常終了
}
